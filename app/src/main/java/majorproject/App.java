/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package majorproject;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

import java.util.List;

import majorproject.model.ModelEngine;
import majorproject.model.inputengine.*;
import majorproject.model.outputengine.*;
import majorproject.model.cacheengine.*;
import majorproject.model.utility.*;

import majorproject.presenter.WeatherPresenter;
import majorproject.view.ViewCoordinator;

/**
* Class to create and couple the ModelEngine, Presenter and ViewCoordinator (as part of the MVP architecture used).
* Constructs the InputEngine, OutputEngine and CacheEngine for ModelEngine based on user command line arguments.
* Retrieves the environment variable from the system, and gives them to the model.
*/
public class App extends Application {

  /**
  * Launch the JavaFX window, giving it the command line arguments.
  * @param args Command line arguments.
  */
  public static void main(String[] args) {
    launch(args);
  }

  /**
  * JavaFX method to launch a given primary stage.
  * Converts command line arguments to InputEngine, OutputEngine and CacheEngine in ModelEngine.
  * Collects the environment variables.
  * Constructs ModelEngine, WeatherPresenter and ViewCoordinator as the pieces of the MVP architecture used.
  * @param primaryStage The Stage to launch.
  */
  @Override
    public void start(Stage primaryStage) {
      //defaults to offline.
      InputEngine inputEngine = new OfflineInputEngine();
      OutputEngine outputEngine = new OfflineOutputEngine();
      CacheEngine cacheEngine = new OfflineCacheEngine();

      String sendgridFromEmail = "dummyEmail";
      String sendgridAPIKey = "dummyKey";
      String weatherbitAPIKey = "dummyKey";

      //handle the offline/online arguments
      //defaults to offline on both.
      List<String> argsList = getParameters().getRaw();
      if(argsList.size()==2){
        if(argsList.get(0).equals("online")){
          inputEngine = new OnlineInputEngine();
          cacheEngine = new OnlineCacheEngine();
          System.out.println("Input engine set to 'online' mode.");
          weatherbitAPIKey = System.getenv("INPUT_API_KEY");
        }
        if(argsList.get(1).equals("online")){
          outputEngine = new OnlineOutputEngine();
          System.out.println("Output engine set to 'online' mode.");
          sendgridFromEmail = System.getenv("SENDGRID_API_EMAIL");
          sendgridAPIKey = System.getenv("SENDGRID_API_KEY");
        }
      } else {
        System.out.println("Program arguments did not follow the correct format. Defaulting to offline. Use the following format: gradle run --args=\"offline/online offline/online\" ");
      }

      ModelEngine engine = new ModelEngine(inputEngine, outputEngine, cacheEngine,
                                            weatherbitAPIKey, sendgridAPIKey, sendgridFromEmail,
                                            new LocationsFileLoader());
      primaryStage.setTitle("Weather Tracker");

      WeatherPresenter presenter = new WeatherPresenter(engine, new ViewCoordinator(primaryStage));
    }
}
